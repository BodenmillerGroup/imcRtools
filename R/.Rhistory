x <- "test"
if(!is.logical(x)){
print("no")
}
x <- TRUE
if(!is.logical(x)){
print("no")
}
library(imcRtools)
data(pancreasSCE)
BiocManager::install("imcdatasets")
data(pancreasSCE)
library(imcdataset)
library(imcdatasets)
data("pancreasSCE")
pancreasSCE
unique(pancreasSCE$CellType)
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "celltype")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "CellType")
colPairNames(pancreasSCE)
pancreasSCE <- buildSpatialGraph(pancreasSCE, img_id = "ImageNb",
type = "expansion", threshold = 20)
# Detect patches of "celltype_B" cells
pancreasSCE <- patchDetection(pancreasSCE,
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph")
plotSpatial(pancreasSCE, img_id = "ImageNb", node_color_by = "patch_id")
# Detect patches of "celltype_B" cells
pancreasSCE <- patchDetection(pancreasSCE,
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph",min_patch_size = 20)
plotSpatial(pancreasSCE, img_id = "ImageNb", node_color_by = "patch_id")
#' @examples
#' library(imcRtools)
#' data(pancreasSCE)
#'
#' # run patchDetection to identify islets
#' pancreasSCE <-
#'
#' @author Daniel Schulz
#' @importFrom distances distances distance_columns
#' @export
minDistToCells <- function(object,
x_cells,
name = "distToCells",
coords,
img_id,
return_neg = TRUE,
BPPARAM = SerialParam()){
.valid.minDistToCells.input(object,x_cells,name,coords,img_id,return_neg)
cur_meta <- metadata(object)
metadata(object) <- list()
cur_intmeta <- int_metadata(object)
object$x_cells <- x_cells
#cells <- colnames(object[,x_cells])
#other_cells <- colnames(object[,!x_cells])
cur_out <- bplapply(
unique(colData(object)[[img_id]]),
function(x){
# get one image and all cells within the mask
cur_obj <- object[,as.character(colData(object)[[img_id]]) == x]
cur_obj[[name]] <- NA
if (sum(cur_obj$x_cells) == 0) {
return(cur_obj)
}
# get cells of interest and other cells
patch_cells <- which(cur_obj$x_cells)
non_patch_cells <- which(!cur_obj$x_cells)
# calculate the distances for all against all cells
dist_mat <- distances(as.matrix(colData(cur_obj)[,coords]))
# select only those columns (cells) that are part of the patch
pos_dist <- distances::distance_columns(dist_mat,column_indices = patch_cells)
# for each row (cell) get the minimal distance to a cell of the patch (columns)
dist_to_patch <- rowMins(pos_dist)
# select only those columns (cells) that are NOT part of the patch
neg_dist <- distances::distance_columns(dist_mat,column_indices = non_patch_cells)
# # for each row (cell) get the minimal distance to a cell NOT part of the patch (columns)
dist_from_patch <- rowMins(neg_dist)
# cells that had a 0 distance to the patch can be substitutes with the negative distances from the patch
if(return_neg == TRUE) {
dist_to_patch[dist_to_patch == 0] <- -dist_from_patch[dist_from_patch != 0]
}
cur_obj[[name]] <- dist_to_patch
return(cur_obj)
}, BPPARAM = BPPARAM)
cur_out <- do.call("cbind", cur_out)
metadata(cur_out) <- cur_meta
int_metadata(cur_out) <- cur_intmeta
return(cur_out)
}
pancreasSCE[,pancreasSCE$patch_id %in% c(6,8)]
pancreasSCE[,!is.na(pancreasSCE$patch_id)]
!is.na(pancreasSCE$patch_id)
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "sample_id"))
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "sample_id")
.valid.minDistToCells.input <- function(object,x_cells,name,coords,img_id,return_neg){
if(!is(object, "SingleCellExperiment")) {
stop("'object' not of type 'SingleCellExperiment'.")
}
if (!all(is.logical(x_cells))) {
stop("'x_cells' must all be logical.")
}
if (length(x_cells) != ncol(object)) {
stop("Length of 'x_cells' must match the number of cells in 'object'.")
}
if (!is.null(name) & (length(name) != 1 | !is.character(name))) {
stop("'name' must be a single string.")
}
if (length(coords) != 2 | !all(is.character(coords))) {
stop("'coords' must be a character vector of length 2.")
}
if (is(object, "SpatialExperiment")) {
if (!all(coords %in% spatialCoordsNames(object))) {
stop("'coords' not in spatialCoords(object).")
}
} else {
if (!all(coords %in% names(colData(object)))) {
stop("'coords' not in colData(object).")
}
}
if (length(img_id) != 1 | !is.character(img_id)) {
stop("'img_id' must be a single string.")
}
if (!img_id %in% names(colData(object))) {
stop("'img_id' not in colData(object).")
}
if(!is.logical(return_neg)){
stop("'return_neg' is not of type logical.")
}
}
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "sample_id")
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageNumber")
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
library(BiocParallel)
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
library(distances)
# Distance to celltype_B patches
minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")
library(ggplot2)
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
pancreasSCE <- buildSpatialGraph(pancreasSCE, img_id = "ImageNb",
type = "expansion", threshold = 20)
# Detect patches of "celltype_B" cells
pancreasSCE <- patchDetection(pancreasSCE,
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph",min_patch_size = 20)
plotSpatial(pancreasSCE, img_id = "ImageNb", node_color_by = "patch_id")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
pancreasSCE <- buildSpatialGraph(pancreasSCE, img_id = "ImageNb",
type = "expansion", threshold = 20)
# Detect patches of "celltype_B" cells. we will also expand by 1 pixel to fill the gaps within patches
pancreasSCE <- patchDetection(pancreasSCE,
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph",
min_patch_size = 20,
expand_by = 1)
plotSpatial(pancreasSCE, img_id = "ImageNb", node_color_by = "patch_id")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
# Build interaction graph
pancreasSCE <- buildSpatialGraph(pancreasSCE, img_id = "ImageName",
type = "expansion", threshold = 20)
# Detect patches of "celltype_B" cells. we will also expand by 1 pixel to fill the gaps within patches
pancreasSCE <- patchDetection(pancreasSCE,
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph",
min_patch_size = 20,
expand_by = 1)
# Build interaction graph
pancreasSCE <- buildSpatialGraph(pancreasSCE, img_id = "ImageNb",
type = "expansion", threshold = 20)
# Detect patches of "celltype_B" cells. we will also expand by 1 pixel to fill the gaps within patches
pancreasSCE <- patchDetection(pancreasSCE,
img_id = "ImageNb",
patch_cells = pancreasSCE$CellType == "celltype_B",
colPairName = "expansion_interaction_graph",
min_patch_size = 20,
expand_by = 1)
plotSpatial(pancreasSCE, img_id = "ImageNb", node_color_by = "patch_id")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = !is.na(pancreasSCE$patch_id),
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = pancreasSCE$CellType == "celltype_B",
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName")
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
# Distance to celltype_B patches
pancreasSCE <- minDistToCells(pancreasSCE,
x_cells = pancreasSCE$CellType == "celltype_B",
coords = c("Pos_X","Pos_Y"),
img_id = "ImageName",
return_neg = FALSE)
plotSpatial(pancreasSCE,img_id = "ImageName",coords = c("Pos_X","Pos_Y"),node_color_by = "distToCells")+
scale_color_gradient2(low = "darkblue",mid = "white",high = "darkred")
BiocManager::install("pals")
library(pals)
pal.bands()
pal.bands(glasbey())
glasbey()
pal.bands(alphabet())
alpha()
alphabet()
